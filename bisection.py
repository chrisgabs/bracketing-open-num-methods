# -*- coding: utf-8 -*-
"""Bisection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10X6M-2OQuE1R-jvxhCuposeLjZqUQiX4
"""

from sympy.abc import x
from sympy.parsing.sympy_parser import parse_expr
import pandas as pd
from IPython.display import display, HTML
import numpy as np

def get_xr(xl, xu):
    return (xl + xu) / 2

def get_error(curr_xr, prev_xr):
    return ((curr_xr - prev_xr) / curr_xr) * 100

"""## Insert Values Here
### Always run this cell before running the following cells
"""

def bisection(eq, lower, upper, crit):
        # INSERT VALUE FOR THE EQUATION
    equation = parse_expr(eq)
    # INSERT VALUE FOR XL
    xl = lower
    # INSERT VALUE FOR XU

    xu = upper
    # INSERT VALUE FOR STOPPING CRITERION
    stopping_criterion = crit
    ########################################################

    # Instantiate dataframe
    df = pd.DataFrame(columns=['iteration', 'xl', 'xu', 'f_xl', 'f_xu', 'xr', 'f_xr', 'error'])
    # Iteration index
    iteration = 1
    f_xl = equation.subs(x, xl)
    # print(f_xl)
    f_xu = equation.subs(x, xu)
    # print(f_xu)
    xr = get_xr(xl, xu)
    # print(xr)
    f_xr = equation.subs(x, xr)

    error = 100
    arr = [iteration, xl, xu, f_xl, f_xu, xr, f_xr, error]
    df= df.append(dict(zip(df.columns, arr)), ignore_index=True)
    iteration+=1
    #######################################################
    while error>= float(stopping_criterion):
        if f_xr < 0 and f_xu <0:
            xl = xl
            xu = xr
        else:
            xl = xr
            xu = xu
            
        

        f_xl = equation.subs(x, xl)
        
        f_xu = equation.subs(x, xu)
        xr = get_xr(xl, xu)
        f_xr = equation.subs(x, xr) 

        # get xr from previous iteration
        error = abs(get_error(xr, df.at[iteration-2, 'xr']))
        arr = [iteration, xl, xu, f_xl, f_xu, xr, f_xr, error]
        df= df.append(dict(zip(df.columns, arr)), ignore_index=True)
        iteration+=1

    return(df.to_html())